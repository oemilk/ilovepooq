<?xml version="1.0"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--
    Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard.

    It automates the process of checking Java code to spare humans of this boring (but important) task.

    This makes it ideal for projects that want to enforce a coding standard.

    http://checkstyle.sourceforge.net/index.html
    https://github.com/checkstyle/checkstyle
    https://github.com/checkstyle/checkstyle/blob/396a285549e89f618bab45b987c350dd1326379c/src/main/resources/google_checks.xml
-->

<module name="Checker">

    <property name="charset" value="UTF-8" />

    <property name="severity" value="warning" />

    <property name="fileExtensions" value="java, properties, xml" />

    <!-- Checks for whitespace                                                     -->
    <!-- http://checkstyle.sourceforge.net/config_whitespace.html#FileTabCharacter -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">

        <!-- Imports -->

        <!-- Checks for redundant import statements.                               -->
        <!-- http://checkstyle.sourceforge.net/config_imports.html#RedundantImport -->
        <module name="RedundantImport">
            <property name="severity" value="error" />
        </module>

        <!-- Checks that there are no import statements that use the * notation.                              -->
        <!-- http://checkstyle.sourceforge.net/config_imports.html#AvoidStarImport                            -->
        <module name="AvoidStarImport">
            <property name="severity" value="error" />
        </module>

        <!-- General Code Style -->

        <!-- Checks for long lines.                                                                        -->
        <!-- http://checkstyle.sourceforge.net/config_sizes.html#LineLength                                -->
        <module name="LineLength">
            <property name="max" value="100" />
            <property name="ignorePattern"
                value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
        </module>

        <!-- Checks that chosen statements are not line-wrapped.                 -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#NoLineWrap -->
        <module name="NoLineWrap">
            <property name="tokens" value="IMPORT"/>
        </module>

        <!-- Checks for empty blocks.                                        -->
        <!-- http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>

        <!-- Checks for empty catch blocks.                                                                    -->
        <!-- http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock                                   -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected" />
        </module>

        <!-- Checks for braces around code blocks.                                                               -->
        <!-- http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces                                     -->
        <module name="NeedBraces">
            <property name="allowSingleLineStatement" value="true"/>
        </module>

        <!-- Checks for the placement of left curly braces ('{') for code blocks. -->
        <!-- http://checkstyle.sourceforge.net/config_blocks.html#LeftCurly       -->
        <module name="LeftCurly">
            <property name="maxLineLength" value="100" />
        </module>

        <!-- Checks for the placement of right curly braces ('}') for code blocks. -->
        <!-- http://checkstyle.sourceforge.net/config_blocks.html#RightCurly       -->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <!-- Verifies there are no finalize() methods defined in a class.                                   -->
        <!-- http://checkstyle.sourceforge.net/config_coding.html#NoFinalizer                               -->
        <module name="NoFinalizer" />

        <!-- Checks the style of array type definitions.                       -->
        <!-- http://checkstyle.sourceforge.net/config_misc.html#ArrayTypeStyle -->
        <module name="ArrayTypeStyle" />

        <!-- Checks that there is only one statement per line.                        -->
        <!-- http://checkstyle.sourceforge.net/config_coding.html#OneStatementPerLine -->
        <module name="OneStatementPerLine"/>

        <!-- Checks that each variable declaration is in its own statement and on its own line. -->
        <!-- http://checkstyle.sourceforge.net/config_coding.html#MultipleVariableDeclarations  -->
        <module name="MultipleVariableDeclarations"/>

        <!-- Checks that switch statement has a "default" clause.                      -->
        <!-- http://checkstyle.sourceforge.net/config_coding.html#MissingSwitchDefault -->
        <module name="MissingSwitchDefault"/>

        <!-- Checks that long constants are defined with an upper ell.   -->
        <!-- http://checkstyle.sourceforge.net/config_misc.html#UpperEll -->
        <module name="UpperEll"/>

        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification. -->
        <!-- http://checkstyle.sourceforge.net/config_modifier.html#ModifierOrder                               -->
        <module name="ModifierOrder" />

        <!-- Checks for empty line separators after header, package, all import declarations, fields,
        constructors, methods, nested classes, static initializers and instance initializers.   -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator        -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <!-- Checks line wrapping with separators.                                  -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#SeparatorWrap -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>

        <!-- Checks correct indentation of Java code.                       -->
        <!-- http://checkstyle.sourceforge.net/config_misc.html#Indentation -->
        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="braceAdjustment" value="0" />
            <property name="caseIndent" value="4" />
            <property name="throwsIndent" value="4" />
            <property name="lineWrappingIndentation" value="8" />
            <property name="arrayInitIndent" value="2" />
        </module>

        <!-- White Space -->

        <!-- Checks that the whitespace around the Generic tokens (angle brackets) "<" and ">" are correct to the typical convention. -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>

        <!-- Checks that a token is surrounded by whitespace.                          -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
            <property name="allowEmptyCatches" value="false" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
        </module>

        <!-- Checks that a token is followed by whitespace.                           -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAfter -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST" />
        </module>

        <!-- Checks that there is no whitespace before a token.                          -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#NoWhitespaceBefore -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC" />
            <property name="allowLineBreaks" value="true" />
        </module>

        <!-- Checks that there is no whitespace after a token.                          -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html#NoWhitespaceAfter -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
            <property name="allowLineBreaks" value="true" />
        </module>

        <!-- Naming -->

        <!-- Checks that the outer type name and the file name match.             -->
        <!-- http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename -->
        <module name="OuterTypeFilename" />

        <!-- Validates identifiers for packages.                              -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#PackageName -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern"
                value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Validates identifiers for classes, interfaces, enums, and annotations. -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#TypeName          -->
        <module name="TypeName">
            <message key="name.invalidPattern"
                value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Validates identifiers for methods.                              -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#MethodName -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
            <message key="name.invalidPattern"
                value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Validates identifiers for non-static fields.                    -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#MemberName -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that method and catch parameter names conform to a format specified by the format property. -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#ParameterName                                 -->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern"
                value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Checks that catch parameter names conform to a format specified by the format property. -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#CatchParameterName                 -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that local, non-final variable names conform to a format specified by the format property. -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#LocalVariableName                            -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="allowOneCharVarInForLoop" value="true" />
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Validates identifiers for class type parameters.                            -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#ClassTypeParameterName -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Validates identifiers for method type parameters.                            -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName -->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Validates identifiers for interface type parameters.                            -->
        <!-- http://checkstyle.sourceforge.net/config_naming.html#InterfaceTypeParameterName -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks specified tokens text for matching an illegal pattern from format property. -->
        <!-- http://checkstyle.sourceforge.net/config_coding.html#IllegalTokenText              -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
            <property name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
            <property name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
        </module>

        <!-- Restrict using Unicode escapes.                                                  -->
        <!-- http://checkstyle.sourceforge.net/config_misc.html#AvoidEscapedUnicodeCharacters -->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true" />
            <property name="allowByTailComment" value="true" />
            <property name="allowNonPrintableEscapes" value="true" />
        </module>

        <!-- http://checkstyle.sourceforge.net/config_naming.html#AbbreviationAsWordInName -->
        <!--<module name="AbbreviationAsWordInName">-->
            <!--<property name="ignoreFinal" value="false"/>-->
        <!--</module>-->

        <!-- Checks that overload methods are grouped together.                                   -->
        <!-- http://checkstyle.sourceforge.net/config_coding.html#OverloadMethodsDeclarationOrder -->
        <module name="OverloadMethodsDeclarationOrder"/>

        <!-- Check location of annotation on language elements.                                             -->
        <!-- http://checkstyle.sourceforge.net/config_annotation.html#AnnotationLocation#AnnotationLocation -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

    </module>

</module>